server {
    listen       80;
    server_name  localhost;

    root /var/www/public;
    index index.php index.html;

    fastcgi_hide_header X-Powered-By;
    fastcgi_hide_header Server;
    charset utf-8;

    gzip  on;
    #设置允许压缩的页面最小字节数; 这里表示如果文件小于10个字节，就不用压缩，因为没有意义，本来就很小.
    gzip_min_length 10k;
    #设置压缩缓冲区大小，此处设置为4个16K内存作为压缩结果流缓存
    gzip_buffers 4 16k;
    #压缩版本
    gzip_http_version 1.1;
    #设置压缩比率，最小为1，处理速度快，传输速度慢；9为最大压缩比，处理速度慢，传输速度快; 这里表示压缩级别，可以是0到9中的任一个，级别越高，压缩就越小，节省了带宽资源，但同时也消耗CPU资源，所以一般折中为6
    gzip_comp_level 6;
    #制定压缩的类型,线上配置时尽可能配置多的压缩类型!
    gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php application/javascript application/json;
    #配置禁用gzip条件，支持正则。此处表示ie6及以下不启用gzip（因为ie低版本不支持）
    gzip_disable "MSIE [1-6]\.";
    #选择支持vary header；改选项可以让前端的缓存服务器缓存经过gzip压缩的页面; 这个可以不写，表示在传送数据时，给客户端说明我使用了gzip压缩
    gzip_vary on;


    #去除Server信息
    more_clear_headers "Server";
    #最大上传body
    client_max_body_size 256M;

    location / {
        if ($request_method !~ ^(GET|HEAD|POST|DELETE|PUT)$ ) {
            return 501;
        }
	    try_files $uri $uri/ /index.php?$query_string;
    }

    location /diagnosis
    {
        proxy_pass http://127.0.0.1:9090;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header X-Real-IP $remote_addr;
    }


    location /view/ {
        #使用history模式进行路由
       try_files $uri $uri/ /view/index.html;
    }



    location ~ \.php$ {
        fastcgi_pass   127.0.0.1:9000;
        fastcgi_index  index.php;
        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
        include        fastcgi_params;
    }

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    location ~ /\.ht {
        deny  all;
    }
}
